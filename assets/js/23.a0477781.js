(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{449:function(v,e,s){"use strict";s.r(e);var t=s(15),a=Object(t.a)({},(function(){var v=this,e=v.$createElement,s=v._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"条件渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[v._v("#")]),v._v(" 条件渲染")]),v._v(" "),s("h2",{attrs:{id:"v-if"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-if"}},[v._v("#")]),v._v(" v-if")]),v._v(" "),s("p",[v._v("v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v('<h1 v-if="awesome">Vue is awesome!</h1>       //为true时只会渲染这行。awesome为false时，只会渲染下一行，如果不使用else，这行就是单纯的消失。\n<h1 v-else>Oh no 😢</h1>\n')])])]),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[v._v("在 `"),[v._v("` 元素上使用 v-if 条件渲染分组")]],2),v._v(" "),s("p",[v._v("如果想切换多个元素，不需要在每个元素上都设置v-if，只需要使用"),s("code",[v._v("<template>")]),v._v(" 元素把他们包裹起来（"),s("code",[v._v("<template>")]),v._v(" 元素没有样式，只是在html层面包裹了一些元素），设置"),s("code",[v._v("<template>")]),v._v(" 元素就好了。")])]),v._v(" "),s("h2",{attrs:{id:"v-else"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-else"}},[v._v("#")]),v._v(" v-else")]),v._v(" "),s("p",[v._v("你可以使用 v-else 指令来表示 v-if 的“else 块”：")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v('<div v-if="Math.random() > 0.5">\n  Now you see me\n</div>\n<div v-else>\n  Now you don\'t\n</div>\n')])])]),s("p",[v._v("v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。")]),v._v(" "),s("h2",{attrs:{id:"v-else-if"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-else-if"}},[v._v("#")]),v._v(" v-else-if")]),v._v(" "),s("p",[v._v("v-else-if，顾名思义，充当 v-if 的“else-if 块”，并且可以连续使用：")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v("<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>\n")])])]),s("p",[v._v("与 v-else 的用法类似，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。")]),v._v(" "),s("h2",{attrs:{id:"v-show"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-show"}},[v._v("#")]),v._v(" v-show")]),v._v(" "),s("p",[v._v("另一个用于条件性展示元素的选项是 v-show 指令。用法大致一样：")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v('<h1 v-show="ok">Hello!</h1>\n')])])]),s("p",[v._v("不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS property display。")]),v._v(" "),s("p",[v._v("注意，v-show 不支持 "),[v._v(" 元素，也不支持 v-else。")]],2),v._v(" "),s("h2",{attrs:{id:"v-if-vs-v-show"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-if-vs-v-show"}},[v._v("#")]),v._v(" v-if vs v-show")]),v._v(" "),s("p",[v._v("v-if 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。")]),v._v(" "),s("p",[v._v("v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),v._v(" "),s("p",[v._v("相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。")]),v._v(" "),s("p",[v._v("一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。")]),v._v(" "),s("h2",{attrs:{id:"v-if-与-v-for-一起使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-if-与-v-for-一起使用"}},[v._v("#")]),v._v(" v-if 与 v-for 一起使用")]),v._v(" "),s("p",[v._v("提示")]),v._v(" "),s("p",[v._v("不推荐同时使用 v-if 和 v-for。请查阅风格指南以获取更多信息。")]),v._v(" "),s("p",[v._v("当 v-if 与 v-for 一起使用时，v-if 具有比 v-for 更高的优先级。请查阅列表渲染指南以获取详细信息。")])])}),[],!1,null,null,null);e.default=a.exports}}]);