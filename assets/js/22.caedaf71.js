(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{448:function(s,a,t){"use strict";t.r(a);var e=t(15),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"class-与-style-绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-与-style-绑定"}},[s._v("#")]),s._v(" Class 与 Style 绑定")]),s._v(" "),t("p",[s._v("操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。")]),s._v(" "),t("h2",{attrs:{id:"绑定-html-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绑定-html-class"}},[s._v("#")]),s._v(" 绑定 HTML Class")]),s._v(" "),t("h3",{attrs:{id:"对象语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象语法"}},[s._v("#")]),s._v(" 对象语法")]),s._v(" "),t("p",[s._v("我们可以传给 :class  一个对象，以动态地切换 class：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div :class="{ active: isActive }"></div>   \x3c!-- active 这个 class 存在与否将取决于isActive 的值--\x3e\n')])])]),t("p",[s._v("以下是一个更复杂的例子：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div\n  class=\"static\"                                                  //:class 指令可以与普通的 class 属性共存\n  :class=\"{ active: isActive, 'text-danger': hasError }\"          //可以给:class 指令传入更多字段来动态切换多个 class。'text-danger'字符串中含有-，必须要加引号\n></div>\n")])])]),t("p",[s._v('当 isActive 或者 hasError 变化时，class 列表将相应地更新。如果isActive 和 hasError 的值为 true，class 列表将变为 "static active text-danger"。')]),s._v(" "),t("p",[s._v("以下使用计算属性修改了上面的例子。这是一个常用且强大的模式：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :class=\"classObject\"></div>\ndata() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}\n")])])]),t("h3",{attrs:{id:"数组语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组语法"}},[s._v("#")]),s._v(" 数组语法")]),s._v(" "),t("p",[s._v("我们可以把一个数组传给 :class，以应用一个 class 列表：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :class=\"[activeClass, errorClass]\"></div>\ndata() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}\n")])])]),t("p",[s._v("渲染的结果为：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div class="active text-danger"></div>\n')])])]),t("p",[s._v("如果你想根据条件切换列表中的 class，可以使用三元表达式：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\n")])])]),t("p",[s._v("这样写将始终添加 errorClass，但是只有在 isActive 为 true 时才添加 activeClass。")]),s._v(" "),t("p",[s._v("不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div :class="[{ active: isActive }, errorClass]"></div>\n')])])]),t("h3",{attrs:{id:"在组件上使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在组件上使用"}},[s._v("#")]),s._v(" 在组件上使用")]),s._v(" "),t("p",[s._v("这个章节假设你已经对 Vue 组件有一定的了解。当然你也可以先跳过这里，稍后再回过头来看。")]),s._v(" "),t("p",[s._v("当你在带有单个根元素的自定义组件上使用 class attribute 时，这些 class 将被添加到该元素中。此元素上的现有 class 将不会被覆盖。")]),s._v(" "),t("p",[s._v("例如，如果你声明了这个组件：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("const app = Vue.createApp({})\n\napp.component('my-component', {\n  template: `<p class=\"foo bar\">Hi!</p>`\n})\n")])])]),t("p",[s._v("然后在使用它的时候添加一些 class：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div id="app">\n  <my-component class="baz boo"></my-component>\n</div>\n')])])]),t("p",[s._v("HTML 将被渲染为：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<p class="foo bar baz boo">Hi</p>\n')])])]),t("p",[s._v("对于带数据绑定 class 也同样适用：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<my-component :class="{ active: isActive }"></my-component>\n')])])]),t("p",[s._v("当 isActive 为 truthy[1] 时，HTML 将被渲染成为：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<p class="foo bar active">Hi</p>\n')])])]),t("p",[s._v("如果你的组件有多个根元素，你需要定义哪些部分将接收这个类。可以使用 $attrs 组件属性执行此操作：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div id="app">\n  <my-component class="baz"></my-component>\n</div>\nconst app = Vue.createApp({})\n\napp.component(\'my-component\', {\n  template: `\n    <p :class="$attrs.class">Hi!</p>\n    <span>This is a child component</span>\n  `\n})\n')])])]),t("p",[s._v("你可以在非 prop Attribute 小节了解更多关于组件属性继承的信息。")]),s._v(" "),t("h2",{attrs:{id:"绑定内联样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绑定内联样式"}},[s._v("#")]),s._v(" 绑定内联样式")]),s._v(" "),t("h3",{attrs:{id:"对象语法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象语法-2"}},[s._v("#")]),s._v(" 对象语法")]),s._v(" "),t("p",[s._v(":style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\ndata() {\n  return {\n    activeColor: 'red',\n    fontSize: 30\n  }\n}\n")])])]),t("p",[s._v("直接绑定到一个样式对象通常更好，这会让模板更清晰：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :style=\"styleObject\"></div>\ndata() {\n  return {\n    styleObject: {\n      color: 'red',\n      fontSize: '13px'\n    }\n  }\n}\n")])])]),t("p",[s._v("同样的，对象语法常常结合返回对象的计算属性使用。")]),s._v(" "),t("h3",{attrs:{id:"数组语法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组语法-2"}},[s._v("#")]),s._v(" 数组语法")]),s._v(" "),t("p",[s._v(":style 的数组语法可以将多个样式对象应用到同一个元素上：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v('<div :style="[baseStyles, overridingStyles]"></div>\n')])])]),t("h3",{attrs:{id:"自动添加前缀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动添加前缀"}},[s._v("#")]),s._v(" 自动添加前缀")]),s._v(" "),t("p",[s._v("在 :style 中使用需要一个 vendor prefix (浏览器引擎前缀) 的 CSS property 时，Vue 将自动侦测并添加相应的前缀。Vue 是通过运行时检测来确定哪些样式的 property 是被当前浏览器支持的。如果浏览器不支持某个 property，Vue 会进行多次测试以找到支持它的前缀。")]),s._v(" "),t("h3",{attrs:{id:"多重值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多重值"}},[s._v("#")]),s._v(" 多重值")]),s._v(" "),t("p",[s._v("可以为 style 绑定中的 property 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\n")])])]),t("p",[s._v("这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。")])])}),[],!1,null,null,null);a.default=r.exports}}]);