(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{443:function(t,e,a){"use strict";a.r(e);var n=a(15),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"应用-组件实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用-组件实例"}},[t._v("#")]),t._v(" 应用 & 组件实例")]),t._v(" "),a("h2",{attrs:{id:"创建一个应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个应用实例"}},[t._v("#")]),t._v(" 创建一个应用实例")]),t._v(" "),a("p",[t._v("每个 Vue 应用都是通过用 createApp 函数创建一个新的应用实例开始的：\nconst app = Vue.createApp({/* 选项 */})")]),t._v(" "),a("p",[t._v("该应用实例是用来在应用中注册“全局”组件的。"),a("br"),t._v("\n实例可以做如下应用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("const app = Vue.createApp({})\napp.component('SearchInput', SearchInputComponent)\napp.directive('focus', FocusDirective)\napp.use(LocalePlugin)\n\n//应用实例暴露的大多数方法都会返回该同一实例，所以可以修改成以下链式：\nVue.createApp({})\n  .component('SearchInput', SearchInputComponent)\n  .directive('focus', FocusDirective)\n  .use(LocalePlugin)\n")])])]),a("p",[t._v("可以在 "),a("a",{attrs:{href:"https://v3.cn.vuejs.org/api/application-api.html#component",target:"_blank",rel:"noopener noreferrer"}},[t._v("API 参考"),a("OutboundLink")],1),t._v("中浏览完整的应用 API。")]),t._v(" "),a("h2",{attrs:{id:"根组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根组件"}},[t._v("#")]),t._v(" 根组件")]),t._v(" "),a("p",[t._v("传递给 createApp 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点。")]),t._v(" "),a("p",[t._v("一个应用需要被挂载到一个 DOM 元素中。例如，把一个 Vue 应用挂载到 "),a("code",[t._v('<div id="app"></div>')]),t._v("，应该传入 #app：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("const RootComponent = { \n  /* 选项 */ \n}\nconst app = Vue.createApp(RootComponent)\nconst vm = app.mount('#app')\n")])])]),a("p",[t._v("与大多数应用方法不同的是，mount 不返回应用本身。相反，它返回的是根组件实例。"),a("br"),t._v("\n虽然没有完全遵循 MVVM 模型，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示组件实例。"),a("br"),t._v("\n尽管本页面上的所有示例都只需要一个单一的组件就可以，但是大多数的真实应用都是被组织成一个嵌套的、可重用的组件树。举个例子，一个 todo 应用组件树可能是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Root Component\n└─ TodoList\n  ├─ TodoItem\n  │  ├─ DeleteTodoButton\n  │  └─ EditTodoButton\n  └─ TodoListFooter\n      ├─ ClearTodosButton\n      └─ TodoListStatistics\n")])])]),a("p",[t._v("每个组件将有自己的组件实例 vm。根组件与其他组件没什么不同，配置选项是一样的，所对应的组件实例行为也是一样的。")]),t._v(" "),a("h2",{attrs:{id:"组件实例-property"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件实例-property"}},[t._v("#")]),t._v(" 组件实例 property")]),t._v(" "),a("p",[t._v("在前面的指南中，我们认识了 data()。在 data() 中定义的属性是通过组件实例 vm 暴露的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("const app = Vue.createApp({\n  data() {\n    return { count: 4 }\n  }\n})\n\nconst vm = app.mount('#app')\nconsole.log(vm.count) // => 4，在vm中可以获取count的值。\n")])])]),a("p",[t._v("除了 data()，还有各种其他的"),a("a",{attrs:{href:"https://v3.cn.vuejs.org/api/options-data.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("组件选项"),a("OutboundLink")],1),t._v("，例如 methods，props，computed，inject 和 setup。这些都是用户定义的 property，都可以在组件的模板中访问。")]),t._v(" "),a("blockquote",[a("p",[t._v("Vue 还通过组件实例暴露了一些内置 property，如 $attrs 和 $emit。这些 property 都有一个 $ 前缀，以避免与用户定义的 property 名冲突。")])]),t._v(" "),a("h2",{attrs:{id:"生命周期钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子"}},[t._v("#")]),t._v(" 生命周期钩子")]),t._v(" "),a("p",[t._v("每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。"),a("br"),t._v("\n比如 created 钩子可以用来在一个实例被创建之后执行代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Vue.createApp({\n  data() {\n    return { count: 1}\n  },\n  created() {\n    // `this` 指向 vm 实例\n    console.log('count is: ' + this.count) // => \"count is: 1\"\n  }\n})\n")])])]),a("p",[t._v("也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 unmounted。生命周期钩子的 this 上下文指向调用它的当前活动实例。")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("不要在选项 property 或回调上使用箭头函数，比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。"),a("br"),t._v("\n因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。")])]),t._v(" "),a("h2",{attrs:{id:"生命周期图示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期图示"}},[t._v("#")]),t._v(" 生命周期图示")]),t._v(" "),a("p",[t._v("下图展示了实例的生命周期。我们不需要立马弄明白所有的东西，不过随着不断学习和使用，它的参考价值会越来越高。\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021032421314699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70",alt:"实例的生命周期"}})]),t._v(" "),a("blockquote",[a("p",[t._v("这张图来自"),a("a",{attrs:{href:"https://blog.csdn.net/su2231595742/article/details/115186957",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/su2231595742/article/details/115186957"),a("OutboundLink")],1),t._v(",官方图是英文的")])])])}),[],!1,null,null,null);e.default=o.exports}}]);